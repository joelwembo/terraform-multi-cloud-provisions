# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "master" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: "Terraform"

on:
#   workflow_dispatch:
#     inputs:
#       file_name:
#         description: 'file name'
#         required: true
#         default: 'Non-Modularized/ALB-EC2'
#         options: 
#           - 'ALB-EC2'
#           - 'Hello-World'
#           - 'API-Gateway-POST'
  push:
      branches:
        - master
#     branches-ignore:
#       - '*'
#     tags:
#       - '*'

permissions:
  contents: read
  
jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production
    
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        working-directory: Non-Modularized/ALB-EC2
#         ${{ github.event.inputs.folder_name }}

    steps:
#       - name: Prompt for Folder Name
#         id: prompt_folder_name
#         run: |
#           echo "::set-output name=folder_name::$(read -p 'Enter the folder name: ' folder; echo $folder)"

      - name: Checkout
        uses: actions/checkout@v3
    
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false
          
      - name: Terraform Init
        id: initialize
        run: terraform init

      - name: Terraform plan
        id: plan
        run: terraform plan -lock=false

      - name: Terraform destroy
        run: terraform destroy -auto-approve -lock=false


      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#     - name: Terraform Apply
#       if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
#       run: terraform apply -auto-approve -input=false
